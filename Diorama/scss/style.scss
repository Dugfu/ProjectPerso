// You can change this property.
$panelSize: 40px;
$contrast: 2;
































































































body {
  background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);
  height: 100vh;
  overflow: hidden;
  display: flex;
  justify-content: center;
  font-family: 'Lato', sans-serif;
  align-items: center;
  perspective: 1000px;
}

$split: 7;

div {
  transform-style: preserve-3d;
  backface-visibility: hidden;
}

.input {
  display: none;
  
  &.wireframe:checked + .wireframe {
    background: rgba(255, 255, 255, 0.6);
  }
  
  &.wireframe:checked ~ .diorama .box_panel {
    display: block !important;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  &.camera_h:checked + .camera_h {
    background: rgba(255, 255, 255, 0.6);
  }
  
  &.camera_h:checked ~ .diorama .diorama_z {
    animation: cameraZ 5000ms ease-in-out infinite alternate;
  }
  
  &.camera_v:checked + .camera_v {
    background: rgba(255, 255, 255, 0.6);
  }
  
  &.camera_v:checked ~ .diorama .diorama_x {
    animation: cameraX 9000ms ease-in-out infinite alternate;
  }
}

.label {
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 0;
  left: 20px;
  width: 200px;
  height: 40px;
  background: rgba(255, 255, 255, 0.15);
  font-size: 14px;
  border-radius: 5px;
  transition: 400ms;
  cursor: pointer;
  
  &:hover {
    background: rgba(255, 255, 255, 0.3);
  }
  
  &.wireframe {
    transform: translateY(20px);
  }
  
  &.camera_h {
    transform: translateY(70px);
  }
  
  &.camera_v {
    transform: translateY(120px);
  }
}

.diorama {
  position: relative;
  transform: rotateX(60deg) translateZ($panelSize * $split / 2);
  
  &_x {
    transition: 1000ms cubic-bezier(0.170, 0.935, 0.305, 1.000);
  }
  
  &_z {
    transition: 1000ms cubic-bezier(0.170, 0.935, 0.305, 1.000);
  }
}

.base {
  position: absolute;
  width: $panelSize * ($split + 2);
  height: $panelSize * ($split + 2);
  transform: translate(-50%, -50%) translateZ(-$panelSize * ($split + 1) - $panelSize / 2);

  &_panel {
    position: absolute;
    background: linear-gradient(45deg, #232226 0%,#000000 100%);

    &.o-top {
      width: $panelSize * ($split + 2);
      height: $panelSize * ($split + 2);
      
      &::before {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.1);
        transform: translateZ(-60px) scale(1.1);
      }
    }
    
    &.o-front {
      bottom: 0;
      width: $panelSize * ($split + 2) + 40px;
      height: 30px;
      font-size: 7px;
      line-height: 1;
      color: #666;
      text-align: center;
      transform-origin: 0 100%;
      transform: rotateX(-60deg) translateX(-20px) translateY(30px);
      clip-path: polygon(
        20px 0,
        $panelSize * ($split + 2) + 40px - 20px 0,
        $panelSize * ($split + 2) + 40px - 4.8 30px,
        4.8px 30px
      );
      filter: brightness(100% - 10 * $contrast);
    }
    
    &.o-back {
      width: $panelSize * ($split + 2) + 40px;
      height: 30px;
      transform-origin: 0 0;
      transform: rotateX(60deg) translateX(-20px) translateY(-30px);
      clip-path: polygon(
        20px 30px,
        $panelSize * ($split + 2) + 40px - 20 30px,
        $panelSize * ($split + 2) + 40px - 4.8 0,
        4.8px 0
      );
      filter: brightness(100% - 30 * $contrast);
    }
    
    &.o-left {
      width: 30px;
      height: $panelSize * ($split + 2) + 40px;
      transform-origin: 0 0;
      transform: rotateY(-60deg) translateX(-30px) translateY(-20px);
      clip-path: polygon(
        0 4.8px,
        30px 20px,
        30px $panelSize * ($split + 2) + 40px - 20,
        0 $panelSize * ($split + 2) + 40px - 4.8
      );
      filter: brightness(100% - 20 * $contrast);
    }
    
    &.o-right {
      right: 0;
      width: 30px;
      height: $panelSize * ($split + 2) + 40px;
      transform-origin: 100% 100%;
      transform: rotateY(60deg) translateX(30px) translateY(-20px);
      clip-path: polygon(
        0 20px,
        30px 4.8px,
        30px $panelSize * ($split + 2) + 40px - 4.8,
        0 $panelSize * ($split + 2) + 40px - 20
      );
      filter: brightness(100% - 20 * $contrast);
    }
  }
}

@keyframes cameraZ {
  0% {
    transform: rotateZ(-60deg);
  }
  
  100% {
    transform: rotateZ(60deg);
  }
}

@keyframes cameraX {
  0% {
    transform: rotateX(-20deg);
  }
  
  100% {
    transform: rotateX(20deg);
  }
}

.layer {
  position: absolute;
  top: $panelSize * $split / -2;
  left: $panelSize * $split / -2;
  display: grid;
  grid-template: auto / repeat($split, 1fr);
  width: $panelSize * $split;
  height: $panelSize * $split;
  
  @for $i from 1 through 10 {
    &:nth-child(#{$i}) {
      transform: translateZ($panelSize * -$i);
    }
  }
}

.box {
  position: relative;
  
  &_inner {
    position: relative;
  }

  &_panel {
    position: absolute;
    width: $panelSize;
    height: $panelSize;
    background: rgba(255, 0, 0, 0.1);
    
    &.o-front {
      filter: brightness(100% - 10 * $contrast);
      transform: rotateX(-90deg) translateZ($panelSize / 2);
    }
    
    &.o-back {
      filter: brightness(100% - 30 * $contrast);
      transform: rotateX(90deg) translateZ($panelSize / 2);
    }
    
    &.o-right {
      filter: brightness(100% - 20 * $contrast);
      transform: rotateY(90deg) translateZ($panelSize / 2);
    }
    
    &.o-left {
      filter: brightness(100% - 20 * $contrast);
      transform: rotateY(-90deg) translateZ($panelSize / 2);
    }
    
    &.o-top {
      transform: rotateX(0deg) translateZ($panelSize / 2);
    }
  }
}

.controller {
  position: absolute;
  width: 20%;
  height: 100%;
  
  @for $i from 1 through 5 {
    &.o-#{$i} {
      left: 20 * ($i - 1) + 0%;
    }
    
    &.o-#{$i}:hover ~ .diorama .diorama_z {
      transform: rotateZ(-70 * ($i - 1) + 140deg);
    }
  }
}